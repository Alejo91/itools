#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2005-2006 Juan David Ibáñez Palomar <jdavid@itaapy.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Import from the Standard Library
from optparse import OptionParser
import os
import random
import string

# Import from itools
import itools
from itools.handlers.config import Config
from itools.handlers import transactions
from itools.cms.Handler import Handler
from itools.cms.root import Root
from itools.cms.versioning import VersioningAware
from itools.cms import skins
from itools.cms.catalog import CatalogAware


def init(parser, options, target):
    try:
        os.mkdir(target)
    except OSError:
        parser.error('can not create the instance (check permissions)')

    # Create the config file
    config = Config()
    if options.root:
        config.set_value('modules', options.root)
    if options.address:
        config.set_value('address', options.address)
    if options.port:
        config.set_value('port', options.port)
    if options.smtp_host:
        config.set_value('smtp-host', options.smtp_host)
    config.save_state_to('%s/config.conf' % target)

    # Load the root class
    if options.root is None:
        root_class = Root
    else:
        exec('import %s' % options.root)
        exec('root_class = %s.Root' % options.root)
    # Get the password
    if options.password is None:
        password = [ random.choice(string.ascii_letters + string.digits)
                     for x in range(8) ]
        password = ''.join(password)
    else:
        password = options.password
    # Build the instance on memory
    source = root_class(username='admin', password=password)
    # Initialize the database
    source.save_state_to('%s/database' % target)

    # Index everything
    root = root_class('%s/database' % target)
    for handler, context in root.traverse2():
        abspath = handler.get_abspath()
        if handler.name.startswith('.'):
            context.skip = True
            continue
        if isinstance(handler, skins.UI):
            context.skip = True
            continue
        if isinstance(handler, CatalogAware):
            root.index_handler(handler)
        if isinstance(handler, VersioningAware):
            handler.commit_revision()

    transaction = transactions.get_transaction()
    transaction.commit()

    # Backup
    cmd = 'cp -r %s/database %s/database.bak'
    os.system(cmd % (target, target))

    # Transaction state
    open('%s/state' % target, 'w').write('OK')

    # Bravo!
    print '*'
    print '* Welcome to itools.cms'
    print '* A user with administration rights has been created for you:'
    print '*   username: admin'
    print '*   password: %s' % password
    print '*'
    print '* To start the new instance type:'
    print '*   icms-start %s' % target
    print '*'



if __name__ == '__main__':
    # The command line parser
    usage = '%prog [OPTIONS] TARGET'
    version = 'itools %s' % itools.__version__
    description = 'Creates a new instance of itools.cms with the name TARGET.'
    parser = OptionParser(usage, version=version, description=description)
    parser.add_option(
        '-a', '--address', help='listen to IP ADDRESS')
    parser.add_option(
        '-p', '--port', type='int', help='listen to PORT number')
    parser.add_option(
        '-r', '--root', help='use the ROOT handler class to init the instance')
    parser.add_option(
        '-w', '--password', help='use the given PASSWORD for the admin user')
    parser.add_option(
        '-s', '--smtp-host', help='use the given SMTP_HOST to send emails')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.error('incorrect number of arguments')

    target = args[0]

    # Action!
    init(parser, options, target)
