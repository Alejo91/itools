**************************************************************************
itools 0.16.0
**************************************************************************

1. Import changes
=================

The API has been flatten. All functions, constants, classes and exceptions
of a package are available at the package's root level (no need to go search
a function in some module). Only exception is "itools.cms", which is too big
to have a flat API.

Also, all modules are now in lowercase.

These and other minor changes in the organization of the code, made it
necessary to modify some import statements. Some examples:

  from itools.catalog.queries import Equal, Phrase         (Before)
  from itools.catalog import EqQuery, PhraseQuery          (Now)

  from itools.cms.utils import checkid
  from itools.rest import checkid

  from itools.cms.Folder import Folder
  from itools.cms.folder import Folder

  from itools.cms.WebSite import WebSite
  from itools.cms.website import WebSite



2. itools.catalog
=================

The programming interface has changed notably. Check the documentation for
the complete details on how the new API works:

  http://download.ikaaro.org/doc/itools/index.html


2.1 The format has changed
--------------------------

The format of the catalog has changed again. This just means that existing
catalog instances must be rebuilt.


2.2 Creating a new catalog
--------------------------

The most important change is that the catalog is not anymore built around
the itools.handlers package, so its programming interface to create, load
and save the catalog has changed:

To Create a new catalog. Before:

  from itools.catalog import Catalog

  catalog = Catalog(fields=[
      ('name', 'keyword', True, True),
      ('text', 'text', True, False),
  ])
  catalog.save_state_to('catalog')
  catalog = Catalog('catalog')

Now:

  from itools.catalog import make_catalog, KeywordField, TextField

  catalog = make_catalog('catalog',
      KeywordField('name', is_stored=True)
      TextField('text'),
  )

As you can appreciate the definition of the fields to index has changed
too. This is meanly to allow the possibility to define custom fields.


2.3 Save the changes
--------------------

To save the changes made to the catalog, it is a bit different.

Before:

  catalog.save_state()

Now:

  catalog.commit()


2.4 Indexing and Unindexing
---------------------------

There are a couple of high level features that have been added to the
catalog, and that affect the way we index and unindex documents.

2.4.1 Indexing
..............

Now like before we can index a dictonary that contains a key/value pair
for every field.

But now indexing an object where the fields to be indexed are the object's
attributes does not work anymore.

If we want to index objects other than dictionaries we can use the higher
level CatalogAware class. Just inherit from CatalogAware and define a
method "get_catalog_indexes" that returns the dictionary that will finally
be indexed.


2.4.2 UnIndexing
................

The catalog has now the concept of "external id". When creating a new
catalog, the first field we define is the "external id". For example:

  catalog = make_catalog('catalog',
      KeywordField('name', is_stored=True)
      TextField('text'),
  )
 
Here the external id is the field "name". It is required that this field
to be indexed and stored, and that it uniquely identfies the document.

Now the method "unidex_catalog" expects the external id instead of the
internal id.

Before:

  for brain in catalog.search(name='toto').get_documents():
      catalog.unindex_document(brain.__number__)

Now:

  catalog.unindex_document('toto')


2.5 Queries
-----------

The queries are much the same, but they have been renamed to append the
prefix "Query". This is part of the work to flat the API.

Before:

  from itools.catalog.queries import Equal, Phrase, Range, And, Or

Now:

  from itools.catalog import (EqQuery, PhraseQuery, RangeQuery, AndQuery,
      OrQuery)







XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX




3. itools.xml
=============
3.1 Parser
..........

To import and use the parser we advice you to replace :

    > from itools.xml import parser
    
    > for event, value, line_number in parser.Parser(page):

By :

    > from itools.xml import Parser, START_ELEMENT, TEXT
    
    > for events in Parser(page):
    >     event, value, line_number = events 
    >     if event == START_ELEMENT:


4. itools.cms
=============
4.1 Handler
...........
4.1.1 Import Hander
~~~~~~~~~~~~~~~~~~~

The handler has been move, so replace the import :
    > from itools.cms.Handler import Handler
by :
    > from itools.cms.base import Handler

4.1.2 Metadata 
~~~~~~~~~~~~~~

The handler's metadata are not accesible any more
So replace :
    > self.metadata.get_property('dc:description')
by :
    > self.get_property('dc:description')


4.1.3 Build metadata
~~~~~~~~~~~~~~~~~~~~

Now a Handler build his own metadata :
Before :
    > self.build_metadata(companies, **kw)
now :
    > companies.build_metadata(**kw)

4.2 Catalog
...........
4.2.1 Get the catalog
~~~~~~~~~~~~~~~~~~~~~

To import the catalog replace :

    > catalog = root.get_handler('.catalog')

by :
    
    > catalog = context.server.catalog


4.2.2 Catalog Fields
~~~~~~~~~~~~~~~~~~~~

The declaration of the list of field to index in catalog has changed:
Before :

   >  _catalog_fields = BaseRoot._catalog_fields + [
        ('level1', 'keyword', True, True),
        ('level2', 'keyword', True, True),
        ('level3', 'keyword', True, True),
        ('level4', 'keyword', True, False)]

now :

    > from itools.catalog import  KeywordField
    > _catalog_fields = BaseRoot._catalog_fields + [
            KeywordField('level1', is_stored=True),
            KeywordField('level2', is_stored=True),
            KeywordField('level3', is_stored=True),
            KeywordField('level4')]

Note that you can Use other kind of field :

    > from itools.catalog import (TextField, KeywordField, IntegerField,
                                   BoolField)


