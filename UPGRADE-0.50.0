*************************************************************************
itools 0.50.0
*************************************************************************

The current upgrade notes are no complete. Thanks to report any problem you
find.

New Dependencies
================

The minimum required version of Python has been raised to 2.5.2.

The new "itools.xapian" package requires the Xapian library (xapian-core)
and its Python wrapper (xapian-bindings), version 1.0.7 or later.  To
download from "http://www.xapian.org".


Imports
=======

The package "itools.catalog" has been replaced by the package "itools.xapian",
but the API is the same, so only the import sentences must be updated.

Other objects have been renamed accross different packages, the table below
summarizes this changes.

  Before (alphabetical order)    Now
  ----------------------------   ---------------------------
  catalog.*                      xapian.*
  datatypes.FileName             vfs.FileName
  datatypes.XML                  datatypes.XMLContent
  gettext.Message                gettext.POUnit
  i18n.Message                   srx.Message
  i18n.Multilingual              (REMOVED)
  tmx.Message                    tmx.TMXUnit
  tmx.Note                       tmx.TMXNote
  tmx.TMX                        tmx.TMXFile
  web.Node                       web.Resource
  web.Root                       web.RootResource
  xliff.Note                     xliff.XLFNote
  xliff.Translation              xliff.XLFUnit
  xliff.XLIFF                    xliff.XLFFile


Global API
==========

The prototype for the functions "get_abspath", "get_version" and "setup"
has changed.  The required globals namespace has been dropped:

  Before                          Now
  -----------------------------   -------------
  get_abspath(globals(), '...')   get_abspath('...')
  get_version(globals())          get_version()
  setup(globals())                setup()


itools.csv
=============

The 'Table.get_field_title' method has been moved to ikaaro.


itools.gettext
==============

(1) The way to translate a message from a Python file has considerably
changed:

  # Before
  message = u'...'
  self.gettext(message)

  # Now
  from itools.gettext import MSG
  message = MSG(u'...')
  message.gettext()

And the "DomainAware" class has dissapeared:

  # Before
  from itools.gettext import DomainAware
  class MyClass(DomainAware):
      class_domain = 'my_project'
      ...

  # Now
  class MyClass(object):
      ...

(2) There are some changes to the 'POFile' API too:

  Before               Now
  -------------------  ----------------
  POFile.get_messages  POFile.get_units




itools.stl
==========

Now the STL attributes must always be prefixed:

  # Before
  <stl:block repeat="...">

  # Now
  <stl:block stl:repeat="...">


itools.web
==========

(1) The architecture of the web framework has considerably changed.  Before
a URL was mapped to a method, now it is mapped to a instance of the 'BaseView'
class:

  # Before
  from itools.web import Node
  class MyClass(Node):
      view__access__ = True
      def view(self, context):
          ...

  # Now
  from itools.web import Node, BaseView
  class MyClassView(BaseView):
      access = True
      def GET(self, resource, context):
          ...

  class MyClass(Resource):
      view = MyClassView()

(2) When a view is not explicitly defined, now the server will use the
'default view'.  Example:

  # Before
  class MyClass(Node):
      def GET(self, context):
          return context.uri.resolve2(';view')

  # Now
  class MyClass(Resource):
      default_view_name = 'view'

This example also illustrates that now we do not recommend to redirect to a
default view, but to return straight away the response to the client:

  # Before
  GET / HTTP/1.1
  HTTP/1.1 302 Found

  GET /;view HTTP/1.1
  HTTP/1.1 200 OK

  # Now
  GET / HTTP/1.1
  HTTP/1.1 200 OK

(3) The naming has changed.  What before was sometimes called 'node' and
sometimes 'object', is now named 'resource'.  Some attributes of the
context object have changed their name too.  The table below summarizes
these changes.

  Before (alphabetical order)    Now
  ----------------------------   ---------------------------
  Context.method                 Context.view_name
  Context.object                 Context.resource
  Node._get_object               Resource._get_resource
  Node._has_object               Resource._has_resource
  Node.copy_object               Resource.copy_resource
  Node.del_object                Resource.del_resource
  Node.get_object                Resource.get_resource
  Node.get_objects               Resource.get_resources
  Node.get_real_object           Resource.get_real_resource
  Node.has_object                Resource.has_resource
  Node.move_object               Resource.move_resource
  Node.set_object                Resource.set_resource
  Node.traverse_objects          Resource.traverse_resources

(4) The prototype of the 'Context.get_form_value' method has changed, the
order of its optional parameters have been swapped:

  # Before
  Context.get_form_value(name, default=None, type=String)

  # Now
  Context.get_form_value(name, type=String, default=None)

Other context methods have been removed, the functionality they provided is
now available through the views interface.  These methods are:

  # Removed
  Context.build_form_namespace(schema, method=None)
  Context.check_form_input(schema)

The 'context.commit' attribute has been dropped.

(5) The access control API has changed too, now the 'is_access_allowed' method
expects a 'View' instead of a method name.

  # Before
  AccessControl.is_access_allowed(user, resource, method_name)

  # Now
  AccessControl.is_access_allowed(user, resource, view)


itools.xml
==========

(1) Now the parser returns a different value for DOCUMENT_TYPE events.

  # Before
  if event == DOCUMENT_TYPE:
      name, system_id, public_id, has_internal_subset = value
      if public_id is None:
          print '<!DOCTYPE %s SYSTEM "%s">' % (name, system_id)
      elif ...

  # Now
  if event == DOCUMENT_TYPE:
      name, doctype = value
      print '<!DOCTYPE %s %s>' % (name, doctype.to_str())

(2) The namespaces API has changed.

TODO






itools.gettext
==============

class POFile: ! def set_message: (self, msgid, msgstr=[u''], comments=[],
                                  references={}, fuzzy=False)
                              => (self, message)


itools.handlers
===============

Modifications:
class Handler: - def to_text(self)
class Handler: - mimetype (use get_mimetype)
class File: + def to_text(self)
class Python: - def get_messages(self)
           => + def get_units(self) (and return a Message)


itools.i18n
===========

Modifications:

+ def get_segments(message, keep_spaces=False)
class Message: - def get_segments(self, keep_spaces=None)
class Message: - def __init__(self)


itools.odf
==========

Modifications:
class ODFFile: - def get_messages(self)
            => + def get_units(self) (and return a Message)


itools.xml
==========

Imports:
- set_namespace
- XMLNSNamespace
- AbstractNamespace
+ DocType

Modifications:
! class XMLNamespace: (AbstractNamespace)
                   => (object)
class XMLNamespace: - def get_datatype(cls, name)
class XMLNamespace: + def __init__(self, uri, prefix, elements=None,
                                   free_attributes=None)
class XMLNamespace: + def get_element(self, name)
class XMLNamespace: + def get_free_attribute(self, name)

! class XMLNSNamespace: (AbstractNamespace)
                     => (XMLNamespace)
class XMLNSNamespace: - def get_datatype(cls, name)
class XMLNSNamespace: + def get_free_datatype(self, name)


