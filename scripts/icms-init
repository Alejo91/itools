#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2005-2006 Juan David Ibáñez Palomar <jdavid@itaapy.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

# Import from the Standard Library
from optparse import OptionParser
import os
import random
import string
import sys

# Import from itools
import itools
from itools.catalog import make_catalog
from itools.handlers.config import Config
from itools.cms.root import Root
from itools.cms.catalog import CatalogAware


def init(parser, options, target):
    try:
        os.mkdir(target)
    except OSError:
        parser.error('can not create the instance (check permissions)')

    # Create the config file
    config = Config()
    # The modules
    comment = [
        'The variable "modules" lists the Python modules or packages that',
        'will be loaded when the applications starts.',
        '',
        'modules = ']
    if options.root:
        config.set_value('modules', options.root, comment=comment)
    else:
        config.append_comment(comment)
    # The address
    comment = [
        'The variable "address" defines the internet address the web server',
        'will listen to for HTTP connections.',
        '',
        'address = 127.0.0.1']
    if options.address:
        config.set_value('address', options.address, comment=comment)
    else:
        config.append_comment(comment)
    # The port
    comment = [
        'The variable "port" defines the port number the web server will',
        'listen to for HTTP connections.',
        '',
        'port = 8080']
    if options.port:
        config.set_value('port', options.port, comment=comment)
    else:
        config.append_comment(comment)
    # The SMTP host
    comment = [
        'The variable "smtp-host" defines the name or IP address of the SMTP',
        'relay. This option is required for the application to send emails.',
        '',
        'smtp-host = localhost']
    if options.smtp_host:
        config.set_value('smtp-host', options.smtp_host, comment=comment)
    else:
        config.append_comment(comment)
    # Save the file
    config.save_state_to('%s/config.conf' % target)

    # Load the root class
    if options.root is None:
        root_class = Root
    else:
        exec('import %s' % options.root)
        exec('root_class = %s.Root' % options.root)

    # Get the email address for the init user
    if options.email is None:
        sys.stdout.write("Type your email address: ")
        email = sys.stdin.readline().strip()
    else:
        email = options.email
    # Get the password
    if options.password is None:
        password = [ random.choice(string.ascii_letters + string.digits)
                     for x in range(8) ]
        password = ''.join(password)
    else:
        password = options.password

    # Build the instance on memory
    source = root_class(username=email, password=password)
    # Initialize the database
    source.save_state_to('%s/database' % target)

    # Index everything
    root = root_class('%s/database' % target)
    catalog = make_catalog('%s/catalog' % target, root._catalog_fields)
    for object in root._traverse_catalog_aware_objects():
        catalog.index_document(object)
    catalog.commit()

    # Bravo!
    print '*'
    print '* Welcome to itools.cms'
    print '* A user with administration rights has been created for you:'
    print '*   username: %s' % email
    print '*   password: %s' % password
    print '*'
    print '* To start the new instance type:'
    print '*   icms-start %s' % target
    print '*'



if __name__ == '__main__':
    # The command line parser
    usage = '%prog [OPTIONS] TARGET'
    version = 'itools %s' % itools.__version__
    description = 'Creates a new instance of itools.cms with the name TARGET.'
    parser = OptionParser(usage, version=version, description=description)
    parser.add_option(
        '-a', '--address', help='listen to IP ADDRESS')
    parser.add_option(
        '-p', '--port', type='int', help='listen to PORT number')
    parser.add_option(
        '-r', '--root', help='use the ROOT handler class to init the instance')
    parser.add_option(
        '-e', '--email', help='e-mail address of the admin user')
    parser.add_option(
        '-w', '--password', help='use the given PASSWORD for the admin user')
    parser.add_option(
        '-s', '--smtp-host', help='use the given SMTP_HOST to send emails')

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.error('incorrect number of arguments')

    target = args[0]

    # Action!
    init(parser, options, target)
