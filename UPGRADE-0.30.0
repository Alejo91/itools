*************************************************************************
itools 0.30.0
*************************************************************************

The current upgrade notes are no complete. Thanks to report any problem you
find.

New Dependencies
================

The minimum required version of Python has been raised to 2.5.2.

The new "itools.xapian" package requires the Xapian library (xapian-core)
and its Python wrapper (xapian-bindings), version 1.0.7 or later.  To
download from "http://www.xapian.org".


Imports
=======

The package "itools.catalog" has been replaced by the package "itools.xapian",
but the API is the same, so only the import sentences must be updated.

Other objects have been renamed accross different packages, the table below
summarizes this changes.

  Before (alphabetical order)    Now
  ----------------------------   ---------------------------
  catalog.*                      xapian.*
  datatypes.XML                  datatypes.XMLContent


Global API
==========

The prototype for the functions "get_abspath", "get_version" and "setup"
has changed.  The required globals namespace has been dropped:

  Before                          Now
  -----------------------------   -------------
  get_abspath(globals(), '...')   get_abspath('...')
  get_version(globals())          get_version()
  setup(globals())                setup()


itools.gettext
==============

(1) The way to translate a message from a Python file has considerably
changed:

  # Before
  message = u'...'
  self.gettext(message)

  # Now
  from itools.gettext import MSG
  message = MSG(u'...')
  message.gettext()

And the "DomainAware" class has dissapeared:

  # Before
  from itools.gettext import DomainAware
  class MyClass(DomainAware):
      class_domain = 'my_project'
      ...

  # Now
  class MyClass(object):
      ...

(2)





itools.csv
==========

Modifications:
class Table: - def get_field_title(self, name)


itools.gettext
==============

Imports:
+ Message

Modifications:
class Message: + def __eq__(self, other)
class Message: + def __repr__(self)

class POFile: ! def set_message: (self, msgid, msgstr=[u''], comments=[],
                                  references={}, fuzzy=False)
                              => (self, message)
class POFile: + def set_messages(self, messages)
class POFile: - def get_messages(self)
           => + def get_units(self) (and return a Message)


itools.handlers
===============

Modifications:
class Handler: - def to_text(self)
class Handler: - mimetype (use get_mimetype)
class File: + def to_text(self)
class Python: - def get_messages(self)
           => + def get_units(self) (and return a Message)


itools.i18n
===========

Modifications:
get_language_name returns now a MSG (cf itools.gettext)

+ def get_segments(message, keep_spaces=False)
class Message: - def get_segments(self, keep_spaces=None)
class Message: - def __init__(self)


itools.odf
==========

Modifications:
class ODFFile: - def get_messages(self)
            => + def get_units(self) (and return a Message)


itools.web
==========

Modifications:
class AccessControl: ! def is_access_allowed: (self, user, object, method_name)
                                           => (self, user, object, view)

class Context: - def build_form_namespace(self, schema, method=None)
class Context: ! def get_form_value: (self, name, default=None, type=String)
                                  => (self, name, type=String, default=None)
class Context: - def init(self)
class Context: - def check_form_input(self, schema)
class Context: + def agent_is_a_robot(self)
class Context: + def get_query_value(self, name, type=String, default=None)

class Server: - def HEAD(self, context)
class Server: - def commit_transaction(self, context)
class Server: - def traverse(self, context)
class Server: - def GET(self, context)
class Server: - def LOCK(self, context)
class Server: - def UNLOCK(self, context)
class Server: - def PUT(self, context)
class Server: - def get_site_root(self, hostname)
class Server: - def POST(self, context)
class Server: - def get_user(self, context)
class Server: + def find_user(self, context)
class Server: + def find_site_root(self, context)
class Server: + def init_context(self, context)


itools.xml
==========

Imports:
- set_namespace
- XMLNSNamespace
- AbstractNamespace
+ DocType

Modifications:
! class XMLNamespace: (AbstractNamespace)
                   => (object)
class XMLNamespace: - def get_datatype(cls, name)
class XMLNamespace: + def __init__(self, uri, prefix, elements=None,
                                   free_attributes=None)
class XMLNamespace: + def get_element(self, name)
class XMLNamespace: + def get_free_attribute(self, name)

! class XMLNSNamespace: (AbstractNamespace)
                     => (XMLNamespace)
class XMLNSNamespace: - def get_datatype(cls, name)
class XMLNSNamespace: + def get_free_datatype(self, name)


Remarque:
The XMLParser returns now the following event for a doctype:

(DOCUMENT_TYPE, DocType, line_number)

DocType is a new class that can manage the DTD.


