#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2005-2006 Juan David Ibáñez Palomar <jdavid@itaapy.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

# Import from the Standard Library
from ConfigParser import RawConfigParser
from optparse import OptionParser

# Import from itools
import itools
from itools.uri import get_reference, get_absolute_reference2
from itools import vfs
from itools.catalog import make_catalog, Catalog
from itools.handlers import Config
from itools.cms.database import DatabaseFS
from itools.cms.server import ask_confirmation
from itools.cms.server import Server, get_root_class, get_config


def update(parser, options, target):
    folder = vfs.open(target)

    # Update the catalog (XXX remove for 0.17)
    if folder.exists('database/.catalog'):
        message = ('Update database (will move the catalog out of the '
                   'database folder)? (y/N)')
        if ask_confirmation(message) is False:
            return
        print '  * Remove "database/.catalog" ...'
        folder.remove('database/.catalog')
        folder.remove('database/.catalog.bak')
        print '  * Create "catalog" ...'
        # Load Python packages and modules
        aux = get_absolute_reference2(target)
        config = get_config(aux)
        modules = config.get_value('modules')
        if modules is not None:
            for name in modules.split():
                name = name.strip()
                exec('import %s' % name)

        cls = get_root_class(aux.resolve2('database'))
        catalog = make_catalog('%s/catalog' % target, *cls._catalog_fields)

    # Build the server object
    server = Server(target)
    root = server.root

    # Check the version
    instance_version = root.get_property('version')
    class_version = root.class_version
    if instance_version == class_version:
        print 'The instance is up-to-date (version: %s).' % instance_version
        return
    if instance_version > class_version:
        print 'WARNING: the instance (%s) is newer! than the class (%s)' \
              % (instance_version, class_version)
        return

    # Update
    for next_version in root.get_next_versions():
        # Ask
        message = 'Update instance from version %s to version %s (y/N)? ' \
                  % (instance_version, next_version)
        if ask_confirmation(message) is False:
            break
        # Update
        print 'Updating...'
        root.update(next_version)
        print 'Commit...'
        database = server.database
        database.commit()

    # Update catalog (XXX remove for 0.17)
    catalog = Catalog('%s/catalog' % target)
    for object in root._traverse_catalog_aware_objects():
        catalog.index_document(object)
    catalog.commit()



if __name__ == '__main__':
    # The command line parser
    usage = '%prog TARGET'
    version = 'itools %s' % itools.__version__
    description = ('Updates the TARGET itools.cms instance (if needed). Use'
                   ' this command when upgrading to a new version of itools.')
    parser = OptionParser(usage, version=version, description=description)

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.error('incorrect number of arguments')

    target = args[0]

    # Action!
    update(parser, options, target)
