#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2005-2006 Juan David Ibáñez Palomar <jdavid@itaapy.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Import from the Standard Library
from optparse import OptionParser

# Import from itools
import itools
from itools import uri
from itools import vfs
from itools.cms.server import get_config, get_root, ask_confirmation
from itools.vfs.database import DatabaseFS


def update(parser, options, target):
    # Update the database, add "database/.catalog.bak" and remove
    # "database.bak" (XXX remove for 0.16)
    folder = vfs.open(target)
    if folder.exists('database.bak'):
        message = ('Update database (will remove "database.bak" and add '
                   '"database/.catalog.bak")? (y/N)')
        if ask_confirmation(message) is False:
            return
        print '  * Removing "database.bak"...'
        folder.remove('database.bak')
        print '  * Adding "database/.catalog.bak"...'
        folder.copy('database/.catalog', 'database/.catalog.bak')

    # Set the target under the control of the Database FS
    target = uri.get_absolute_reference2(target)
    target.scheme = 'database'

    # Load the config
    config = get_config(target)

    # Load Python packages and modules
    modules = config.get_value('modules')
    if modules is not None:
        for name in modules.split():
            name = name.strip()
            exec('import %s' % name)

    # Load the root resource
    root = get_root(target)

    instance_version = root.get_property('version')
    class_version = root.class_version
    if instance_version == class_version:
        print 'The instance is up-to-date (version: %s).' % instance_version
    elif instance_version > class_version:
        print 'WARNING: the instance (%s) is newer! than the class (%s)' \
              % (instance_version, class_version)
    else:
        message = 'Update instance from version %s to version %s (y/N)? ' \
                  % (instance_version, class_version)
        if ask_confirmation(message) is True:
            print 'Updating...'
            database = target.resolve2('database')
            try:
                root.update()
            except:
                # Restore from backup
                DatabaseFS.rollback(database)
                raise
            # Update backup
            DatabaseFS.commit(database)



if __name__ == '__main__':
    # The command line parser
    usage = '%prog TARGET'
    version = 'itools %s' % itools.__version__
    description = ('Updates the TARGET itools.cms instance (if needed). Use'
                   ' this command when upgrading to a new version of itools.')
    parser = OptionParser(usage, version=version, description=description)

    options, args = parser.parse_args()
    if len(args) != 1:
        parser.error('incorrect number of arguments')

    target = args[0]

    # Action!
    update(parser, options, target)
